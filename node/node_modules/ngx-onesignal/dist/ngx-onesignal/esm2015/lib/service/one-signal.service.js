/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/one-signal.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __awaiter, __decorate, __metadata } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { OneSignalOptions, } from '../interface';
import { ExecIf } from '../decorators';
import { BehaviorSubject } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../interface";
/**
 * @record
 */
function OnsSignalSubscribed() { }
if (false) {
    /** @type {?} */
    OnsSignalSubscribed.prototype.isSubscribed;
    /** @type {?} */
    OnsSignalSubscribed.prototype.userId;
    /** @type {?} */
    OnsSignalSubscribed.prototype.registrationId;
    /** @type {?} */
    OnsSignalSubscribed.prototype.notificationPermission;
    /** @type {?} */
    OnsSignalSubscribed.prototype.optedOut;
    /** @type {?} */
    OnsSignalSubscribed.prototype.serviceWorkerActive;
}
/** @type {?} */
const isSubscribe = (/**
 * @param {?} __0
 * @return {?}
 */
({ isSubscribed, userId, registrationId, notificationPermission, optedOut, serviceWorkerActive, }) => isSubscribed &&
    Boolean(userId) &&
    Boolean(registrationId) &&
    notificationPermission === 'granted' &&
    optedOut === false &&
    Boolean(serviceWorkerActive));
const ɵ0 = isSubscribe;
/** @type {?} */
const hasSubsctibed = (/**
 * @param {?} oneSignal
 * @return {?}
 */
(oneSignal) => Promise.all([
    oneSignal.isPushNotificationsEnabled(),
    oneSignal.getUserId(),
    oneSignal.getRegistrationId(),
    oneSignal.getNotificationPermission(),
    oneSignal.isOptedOut(),
    oneSignal.context.serviceWorkerManager.getActiveState(),
]).then((/**
 * @param {?} __0
 * @return {?}
 */
([isSubscribed, userId, registrationId, notificationPermission, optedOut, serviceWorkerActive,]) => ({
    isSubscribed,
    userId,
    registrationId,
    notificationPermission,
    optedOut,
    serviceWorkerActive,
}))));
const ɵ1 = hasSubsctibed;
// @dynamic
export class OneSignalService {
    /**
     * @param {?} doc
     * @param {?} options
     */
    constructor(doc, options) {
        this.doc = doc;
        this.options = options;
        this.scriptinitalize = false;
        this.scriptURL = 'https://cdn.onesignal.com/sdks/OneSignalSDK.js';
        this.isSupportedSubject$ = new BehaviorSubject(false);
        this.SubscribeStateSubject$ = new BehaviorSubject({
            isSubscribed: false,
            userId: '',
            registrationId: '',
            notificationPermission: '',
            optedOut: true,
            serviceWorkerActive: '',
        });
        this.isOptedOutSubject$ = new BehaviorSubject(false);
        this.isPushNotificationsEnabledSubject$ = new BehaviorSubject(false);
        this.userIdSubject$ = new BehaviorSubject(null);
        /**
         * @see {\@link https://documentation.onesignal.com/docs/web-push-sdk#ispushnotificationssupported}
         */
        this.isSupported$ = this.isSupportedSubject$.asObservable();
        /**
         * @see {\@link https://documentation.onesignal.com/docs/web-push-sdk#ispushnotificationsenabled}
         */
        this.isPushNotificationsEnabled$ = this.isPushNotificationsEnabledSubject$.asObservable();
        /**
         * @see {\@link https://documentation.onesignal.com/docs/troubleshooting-web-push#3-check-if-you-are-subscribed}
         */
        this.subscribeState$ = this.SubscribeStateSubject$.asObservable().pipe(shareReplay(1));
        /**
         * @see {\@link https://documentation.onesignal.com/docs/troubleshooting-web-push#3-check-if-you-are-subscribed}
         */
        this.isSubscribe$ = this.subscribeState$.pipe(map(isSubscribe));
        this.userId$ = this.userIdSubject$.asObservable();
        this.init();
    }
    /**
     * @return {?}
     */
    get isSupported() {
        return this.isSupportedSubject$.value;
    }
    /**
     * @return {?}
     */
    get isSubscribe() {
        return isSubscribe(this.SubscribeStateSubject$.value);
    }
    /**
     * @return {?}
     */
    get isInitialized() {
        return this.scriptinitalize;
    }
    /**
     * @return {?}
     */
    get isOptedOut() {
        return this.isOptedOutSubject$.value;
    }
    /**
     * @return {?}
     */
    get userId() {
        return this.userIdSubject$.value;
    }
    /**
     * @return {?}
     */
    subscribe() {
        if (this.isSupported) {
            if (this.isOptedOutSubject$.value) {
                OneSignal.setSubscription(true);
            }
            else {
                OneSignal.registerForPushNotifications();
            }
        }
    }
    /**
     * call OneSignal.setSubscription(false)
     * @see {\@link https://documentation.onesignal.com/docs/web-push-sdk#section--setsubscription-}
     * @return {?}
     */
    unsubscribe() {
        if (this.isSubscribe) {
            OneSignal.setSubscription(false);
        }
    }
    /**
     * https://documentation.onesignal.com/docs/web-push-sdk#section-loading-sdk-asynchronously
     * \@example
     * ngxOneSignal.push(['sendTag', 'key', 'value', function(tagsSent) {
     *   // Callback called when tags have finished sending
     * }]);
     * // or
     * ngxOneSignal.push(['sendTag', 'key', 'value']).then((tagsSent) => {
     *   // Callback called when tags have finished sending
     * });
     * @param {?} items push(["functionName", param1, param2]);
     * @return {?}
     */
    push(items) {
        if (this.isSupported) {
            return OneSignal.push(items);
        }
        else {
            return Promise.resolve();
        }
    }
    /**
     * @private
     * @return {?}
     */
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.scriptinitalize) {
                    yield this.addScript();
                    yield this.initOneSignal();
                    this.scriptinitalize = true;
                }
            }
            catch (_a) {
                this.scriptinitalize = false;
            }
        });
    }
    /**
     * @private
     * @return {?}
     */
    addScript() {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            /** @type {?} */
            const head = this.doc.getElementsByTagName('head')[0];
            /** @type {?} */
            const script = this.doc.createElement('script');
            script.type = 'text/javascript';
            script.onload = resolve;
            script.onerror = reject;
            script.src = this.scriptURL;
            head.appendChild(script);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    initOneSignal() {
        return __awaiter(this, void 0, void 0, function* () {
            yield OneSignal.init(Object.assign({}, this.options));
            yield OneSignal.on('subscriptionChange', (/**
             * @return {?}
             */
            () => __awaiter(this, void 0, void 0, function* () {
                this.SubscribeStateSubject$.next(yield hasSubsctibed(OneSignal));
            })));
            // https://documentation.onesignal.com/docs/web-push-sdk#section-subscription-change
            this.isSupportedSubject$.next(yield OneSignal.isPushNotificationsSupported());
            this.isPushNotificationsEnabledSubject$.next(yield OneSignal.isPushNotificationsEnabled());
            this.isOptedOutSubject$.next(yield OneSignal.isOptedOut());
            this.SubscribeStateSubject$.next(yield hasSubsctibed(OneSignal));
            this.userIdSubject$.next(yield OneSignal.getUserId());
        });
    }
}
OneSignalService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
OneSignalService.ctorParameters = () => [
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: OneSignalOptions }
];
/** @nocollapse */ OneSignalService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OneSignalService_Factory() { return new OneSignalService(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i2.OneSignalOptions)); }, token: OneSignalService, providedIn: "root" });
__decorate([
    ExecIf('isInitialized'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], OneSignalService.prototype, "subscribe", null);
__decorate([
    ExecIf('isInitialized'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], OneSignalService.prototype, "unsubscribe", null);
__decorate([
    ExecIf('isInitialized'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array]),
    __metadata("design:returntype", void 0)
], OneSignalService.prototype, "push", null);
if (false) {
    /**
     * @type {?}
     * @private
     */
    OneSignalService.prototype.scriptinitalize;
    /**
     * @type {?}
     * @private
     */
    OneSignalService.prototype.scriptURL;
    /**
     * @type {?}
     * @private
     */
    OneSignalService.prototype.isSupportedSubject$;
    /**
     * @type {?}
     * @private
     */
    OneSignalService.prototype.SubscribeStateSubject$;
    /**
     * @type {?}
     * @private
     */
    OneSignalService.prototype.isOptedOutSubject$;
    /**
     * @type {?}
     * @private
     */
    OneSignalService.prototype.isPushNotificationsEnabledSubject$;
    /**
     * @type {?}
     * @private
     */
    OneSignalService.prototype.userIdSubject$;
    /**
     * @see {\@link https://documentation.onesignal.com/docs/web-push-sdk#ispushnotificationssupported}
     * @type {?}
     */
    OneSignalService.prototype.isSupported$;
    /**
     * @see {\@link https://documentation.onesignal.com/docs/web-push-sdk#ispushnotificationsenabled}
     * @type {?}
     */
    OneSignalService.prototype.isPushNotificationsEnabled$;
    /**
     * @see {\@link https://documentation.onesignal.com/docs/troubleshooting-web-push#3-check-if-you-are-subscribed}
     * @type {?}
     */
    OneSignalService.prototype.subscribeState$;
    /**
     * @see {\@link https://documentation.onesignal.com/docs/troubleshooting-web-push#3-check-if-you-are-subscribed}
     * @type {?}
     */
    OneSignalService.prototype.isSubscribe$;
    /** @type {?} */
    OneSignalService.prototype.userId$;
    /**
     * @type {?}
     * @private
     */
    OneSignalService.prototype.doc;
    /**
     * @type {?}
     * @private
     */
    OneSignalService.prototype.options;
}
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,