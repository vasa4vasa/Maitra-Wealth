"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const terminal_1 = require("@angular-devkit/core/src/terminal");
const schematics_1 = require("@angular-devkit/schematics");
const schematics_2 = require("@angular/cdk/schematics");
const config_1 = require("@schematics/angular/utility/config");
const ast_utils_1 = require("@schematics/angular/utility/ast-utils");
const ng_ast_utils_1 = require("@schematics/angular/utility/ng-ast-utils");
const core_1 = require("@angular-devkit/core");
const file_1 = require("../util/file");
const path_1 = require("path");
const ts = require("typescript");
function default_1(options) {
    return (tree, context) => {
        return schematics_1.chain([
            addNgxOnesignalModule(options),
            addOneSignalSDKWorkers(options),
            updateAngularJson(options),
            replaceServiceWorkerScript(options)
        ])(tree, context);
    };
}
exports.default = default_1;
function addNgxOnesignalModule(options) {
    return (tree, context) => {
        const MODULE_NAME = `NgxOneSignalModule.forRoot({ appId: '${options.appId}'}),`;
        const workspace = config_1.getWorkspace(tree);
        const project = schematics_2.getProjectFromWorkspace(workspace, options.project);
        const appModulePath = ng_ast_utils_1.getAppModulePath(tree, schematics_2.getProjectMainFile(project));
        if (schematics_2.hasNgModuleImport(tree, appModulePath, MODULE_NAME)) {
            return console.warn(terminal_1.red(`Could not import "NgxOneSignalModule" because "NgxOneSignalModule" is already imported.`));
        }
        schematics_2.addModuleImportToRootModule(tree, MODULE_NAME, 'ngx-onesignal', project);
        context.logger.info('✅️ Import NgxOneSignalModule into root module');
        return tree;
    };
}
function addOneSignalSDKWorkers(options) {
    return (tree, context) => {
        const workspace = config_1.getWorkspace(tree);
        const templateSource = schematics_1.apply(schematics_1.url('./files'), [
            schematics_1.template(Object.assign(Object.assign({}, core_1.strings), options)),
            schematics_1.move(schematics_2.getProjectFromWorkspace(workspace, options.project).sourceRoot)
        ]);
        return schematics_1.mergeWith(templateSource, schematics_1.MergeStrategy.Default)(tree, context);
    };
}
function updateAngularJson(options) {
    return (tree) => {
        const workspace = config_1.getWorkspace(tree);
        const project = schematics_2.getProjectFromWorkspace(workspace, options.project);
        const targetOptions = schematics_2.getProjectTargetOptions(project, 'build');
        if (targetOptions.assets) {
            targetOptions.assets = [
                path_1.join(project.sourceRoot, 'OneSignalSDKWorker.js'),
                path_1.join(project.sourceRoot, 'OneSignalSDKUpdaterWorker.js'),
                ...targetOptions.assets
            ];
        }
        else {
            targetOptions.assets = [
                path_1.join(project.sourceRoot, 'OneSignalSDKWorker.js'),
                path_1.join(project.sourceRoot, 'OneSignalSDKUpdaterWorker.js'),
            ];
        }
        tree.overwrite('angular.json', JSON.stringify(workspace, null, 2));
        return tree;
    };
}
function replaceServiceWorkerScript(options) {
    return (tree, context) => {
        const workspace = config_1.getWorkspace(tree);
        const project = schematics_2.getProjectFromWorkspace(workspace, options.project);
        const modulePath = ng_ast_utils_1.getAppModulePath(tree, schematics_2.getProjectMainFile(project));
        if (!modulePath) {
            return context.logger.warn(`❌ Could not find environment file: "${modulePath}". Skipping firebase configuration.`);
        }
        const insertion = `'OneSignalSDKWorker.js'`;
        const sourceFile = file_1.readIntoSourceFile(tree, modulePath);
        const sourceFileText = sourceFile.getText();
        if (sourceFileText.includes(insertion)) {
            return;
        }
        const nodes = ast_utils_1.getSourceNodes(sourceFile);
        // tslint:disable-next-line:no-non-null-assertion
        const serviceWorkerScript = nodes.find(node => node.kind === ts.SyntaxKind.StringLiteral &&
            node.getText(sourceFile) === `'ngsw-worker.js'`);
        if (typeof serviceWorkerScript === 'undefined') {
            context.logger.error(`❌ @angular/pwa will not be added, please execute the following command 'npx ng add @angular/pwa'`);
            throw Error('@angular/pwa will not be added');
        }
        const recorder = tree.beginUpdate(modulePath);
        recorder.remove(serviceWorkerScript.pos, serviceWorkerScript.getFullWidth());
        recorder.insertLeft(serviceWorkerScript.pos, insertion);
        tree.commitUpdate(recorder);
        context.logger.info('✅️ Environment configuration');
        return tree;
    };
}
//# sourceMappingURL=setup.js.map